---
title: "Statewide Survey Non-Response Analysis"
author: "Eve Perry"
date: today
format: 
  bhhi-quarto-html:
    code-fold: true
---

```{r setup}
library(bhhi.doc)
library(tidyverse)
library(janitor)
library(kableExtra)
library(ggraph)
library(cowplot)
library(tidygraph)
```

# Defining responses and non-responses

To determine the non-response rate, we must first define responses. We only consider those who finished the survey (`survey_count == 1`) as responses. Those who declined to talk to the interviewer, whose eligibility we could not determine (for language or other reasons), who did not consent to the full interview, or did not finish the survey are considered non-responses. We exclude those determined to be ineligible from the non-responses since they are, by definition, not in the survey frame.

Below is a chart that shows the participants' progression through the interview process:

```{r}
#| echo: true
surveys = read_rds("Y:/Research/BHHI/statewide_survey_processed_data/latest/statewide_survey_processed.rds") %>% 
  filter(is.na(rds) | rds == 0) %>% 
  mutate(
    county = fct_relevel(
      as_factor(county),
      c(
        "Sonoma",
        "Placer",
        "Santa Clara",
        "Fresno/Madera",
        "Butte",
        "Los Angeles",
        "San Diego",
        "Sacramento"
      )
    ),
    language_issues = eligible_yn == -4,
    declined = eligible_yn == -3,
    could_not_determine_eligibility = eligible_yn == -2,
    eligibility_determined = eligible_yn >= -1,
    ineligible = eligible_yn %in% -1:0,
    eligible = eligible_yn %in% 1:3,
    consented_at_start = eligible_yn %in% 1:2,
    did_not_consent = eligible_yn == 3,
    did_not_finish = consented_at_start & survey_count == 0,
    response = survey_count == 1,
    non_response = !(ineligible | survey_count == 1),
    ## perceived demographics
    # age
    perceived_age = fct_explicit_na(as_factor(perceived_age), "Missing"),
    # disability
    perceived_disability = fct_explicit_na(
      as_factor(perceived_disability), "Missing"
    ),
    perceived_disability = fct_recode(
      perceived_disability,
      "Disabled" = "Yes",
      "Not Disabled" = "No"
    ),
    # intoxication
    perceived_intoxication = fct_explicit_na(
      as_factor(perceived_intox), "Missing"
    ),
    perceived_intoxication = fct_recode(
      perceived_intoxication,
      "Intoxicated" = "Yes",
      "Not Intoxicated" = "No"
    ),
    # gender
    perceived_gender = fct_explicit_na(
      as_factor(perceived_gender), "Missing"
    ),
    perceived_gender = fct_recode(
      perceived_gender,
      "Transgender" = "Transgender, Genderqueer, Gender non-binary or Unclear"
    ),
    # race
    perceived_race = fct_explicit_na(
      as_factor(perceived_race_onecat), "Missing"
    ),
    perceived_race = fct_recode(
      perceived_race,
      "Asian/Pacific Islander" = "Asian",
      "Asian/Pacific Islander" = "Pacific Islander, Samoan, Hawaiian",
      "Black" = "Black, African-American, African",
      "White" = "White, Caucasian, European American",
      "Latinx" = "Latinx, Hispanic, Latin American",
      "Native American" = "Native American, Alaska Native",
      "Multiracial" = "Mixed/Multiracial",
      "Other" = "Different race or ethnic ID, or unclear",
      "Missing" = "FIX CODING ERROR"
    ),
    across(
      c(perceived_age, perceived_disability, perceived_gender, perceived_intoxication, perceived_race), fct_relevel, sort),
    across(
      c(perceived_age, perceived_disability, perceived_gender, perceived_intoxication, perceived_race), fct_relevel, "Missing", after = Inf)
  )
```

```{r}
#| fig-height: 8.1
nodes = surveys %>% 
  summarise(
    approached = n(),
    declined_eligibility_determination = sum(declined),
    eligibility_determined = sum(eligibility_determined),
    no_eligibility_determination = sum(
      language_issues, could_not_determine_eligibility
    ),
    eligible = sum(did_not_consent, did_not_finish, response),
    ineligible = sum(ineligible),
    consented = sum(did_not_finish, response),
    did_not_consent = sum(did_not_consent),
    finished = sum(response),
    did_not_finish = sum(did_not_finish)
  ) %>% 
  pivot_longer(everything(), names_to = "node", values_to = "count") %>% 
  mutate(
    label = paste(
      str_to_title(str_replace_all(node, "_", " ")),
      count,
      sep = "\n"
    ),
    response = case_when(
      node == "finished" ~ "Response",
      node == "ineligible" ~ "Excluded",
      node %in% c(
        "approached", "eligibility_determined", "eligible", "consented"
      ) ~ "Intermediate",
      TRUE ~ "Non-Response"
    )
  )

edges = tribble(
  ~ from, ~ to,
  "approached", "declined_eligibility_determination",
  "approached", "eligibility_determined",
  "approached", "no_eligibility_determination",
  "eligibility_determined", "ineligible",
  "eligibility_determined", "eligible",
  "eligible", "did_not_consent",
  "eligible", "consented",
  "consented", "did_not_finish",
  "consented", "finished"
)

tbl_graph(nodes, edges) %>% 
  ggraph(layout = "tree") +
  geom_edge_diagonal() +
  geom_node_label(
    aes(label = label, color = response),
    key_glyph = draw_key_point
  ) +
  scale_color_manual(
    name = NULL,
    values = c(
      "Response" = bhhi_palette("green"),
      "Non-Response"= bhhi_palette("red"),
      "Excluded" = bhhi_palette("grey"),
      "Intermediate" = "black"
    ),
    breaks = c("Response", "Non-Response", "Excluded")
  ) +
  coord_cartesian(xlim = c(-1.6, 1.4)) +
  theme(legend.position = c(0.9, 0.25)) +
  labs(caption = "Note: All counts are unweighted.")
```

# Non-response rate

```{r}
weighted_sum = function(var, weight) {
  sum(var * weight, na.rm = TRUE)
}
```


## Initial calculation

The initial calculation of the non-response rate simply divides the non-responses by the sum of response and non-responses:

$$ Non\ Response\ Rate = \frac{Non\ Response}{Response + Non\ Response} $$
And shown by county below:

```{r}
#| echo: true
initial_non_response = surveys %>% 
  group_by(county) %>% 
  summarise(
    approached = n(),
    across(c(response, non_response), weighted_sum, initial_weight)
  ) %>%
  adorn_totals() %>% 
  mutate(
    initial_non_response = non_response / (response + non_response)
  )
```

```{r}
weight_note_text = 
  "Weighted with inverse venue & individual selection probabilities."
weight_note = function(kbl) {
  kbl %>% 
    add_footnote(
      paste0("<div class=kbl-fn>", weight_note_text,"</div>"),
      notation = "none",
      escape = FALSE
    )
}
        
initial_non_response %>% 
  relocate(non_response, .after = approached) %>% 
  kbl(
    col.names = c(
      "County", "Approached", "Non-Response",
      "Response", "Initial Non-Response Rate"
    ),
    digits = c(rep(0, 4), 3)
  ) %>% 
  kable_styling() %>% 
  weight_note()
```

## Adjusting the non-responses for eligibility

In the eligibility screening, we've found that a small number of respondents were ineligible. We want to adjust our non-response count for respondents who declined to participate in the eligibility screen and respondents for whom we could not determine eligibility. 

Assuming that respondents for whom we could determine eligibility are not different than those for whom we could not determine eligibility (see [figures](#perceived-demographics-by-eligibility-determination-status) below), some of the respondents without eligibility determination would have been determined to be ineligible. We also want to exclude these people from our non-response rate calculation.

To get the number of  respondents without eligibility determination who would have been determined to be ineligible, we multiply the share of ineligible respondents among respondents with eligibility determinations by the number of of respondents without eligibility. We then subtract that from the non-response count to get the adjusted non-response count:

$$ Adjusted\ Non\ Response = Non\ Response - Eligiblity\ Not\ Determined * \frac{Ineligible}{Eligibility\ Determined} $$

Ultimately, the adjustment does not have a large effect as the adjustment is small in every county:

```{r}
#| echo: true
adjusted_non_response = surveys %>% 
  group_by(county) %>% 
  summarise(
    approached = sum(initial_weight, na.rm = TRUE),
    across(c(non_response, eligibility_determined, ineligible), weighted_sum, initial_weight)
  ) %>%
  mutate(eligibility_not_determined = approached - eligibility_determined) %>% 
  adorn_totals() %>% 
  mutate(
    adjusted_non_response = 
      non_response - eligibility_not_determined * ineligible / eligibility_determined
  )
```

```{r}
adjusted_non_response %>% 
  select(
    county, eligibility_not_determined, ineligible, 
    eligibility_determined, non_response, adjusted_non_response
  ) %>% 
  kbl(
    col.names = c(
      "County", "Eligibility Not Determined", "Ineligible",
      "Eligibility Determined", "Non-Response", "Adjusted Non-Response"
    ),
    digits = c(rep(0, 5), 1)
  ) %>% 
  kable_styling %>% 
  weight_note()
```

### Perceived demographics by eligibility determination status
Respondents' perceived demographics are similar for those with and without eligibility determinations. This provides assurance that the ineligibility rate among those with determinations can be used to impute the number of likely ineligibility for those without determinations. 

```{r}
eligibility_determination = surveys %>% 
  mutate(
    eligibility_determined = factor(
      eligibility_determined,
      levels = c(TRUE, FALSE),
      labels = c("Eligibility Determined", "Eligibility Not Determined")
    )
  )

demographic_categories = c(
  "age", "disability", "gender", "intoxication", "race"
)

eligibility_determination_plot_data = map(
  demographic_categories,
  function(var_stem) {
    var = paste0("perceived_", var_stem)
    eligibility_determination %>% 
      group_by(eligibility_determined, .data[[var]]) %>% 
      summarise(n = sum(initial_weight, na.rm = TRUE)) %>% 
      mutate(
        category = str_to_sentence(str_replace_all(var, "_", " ")),
        share = n / sum(n)
      ) %>% 
      rename(subcategory = all_of(var)) %>% 
      ungroup() %>% 
      complete(
        category, subcategory, eligibility_determined,
        fill = list(n = 0, share = 0)
      )
  }
)

eligibility_determination_plot_data %>% 
  list_rbind() %>%
  ggplot(
    aes(
      x = share,
      y = fct_relevel(fct_rev(subcategory), "Missing", after = 0),
      fill = eligibility_determined,
      color = eligibility_determined
    )
  ) +
  geom_point(pch = 21, size = 3, alpha = 0.75) +
  scale_x_continuous(name = NULL, labels = scales::percent, limits = 0:1) +
  labs(
    title = "Demographic distribution by eligibility determination status",
    y = NULL,
    caption = weight_note_text
  ) +
  guides(
    fill = guide_legend(title = NULL),
    color = guide_legend(title = NULL)
  ) +
  facet_wrap(vars(category), scales = "free_y") +
  theme(legend.position = c(0.85, 0.25))
```

## Adjusted non-response rate

The adjusted non-response rate is then the adjusted non-response count divided by the sum of the adjusted non-response count and the responses:

$$ Adjusted\ Non\ Response\ Rate = \frac{Adjusted\ Non\ Response}{Response + Adjusted\ Non\ Response} $$

The adjusted non-response rate is slightly lower than the unadjusted rate:

```{r}
#| echo: true
non_response_rate = surveys %>% 
  group_by(county) %>% 
  summarise(
    approached = sum(initial_weight, na.rm = TRUE),
    across(
      c(response, non_response, ineligible, eligibility_determined),
      weighted_sum, initial_weight
    )
  ) %>% 
  mutate(eligibility_not_determined = approached - eligibility_determined) %>% 
  adorn_totals() %>% 
  mutate(
    adjusted_non_response = 
      non_response - eligibility_not_determined * ineligible / eligibility_determined,
    unadjusted_non_response_rate = 
      non_response / (response + non_response),
    adjusted_non_response_rate = 
      adjusted_non_response / (response + adjusted_non_response)
  ) 
```

```{r}
non_response_rate %>% 
  select(
    county, response, adjusted_non_response,
    adjusted_non_response_rate, non_response, unadjusted_non_response_rate
  ) %>% 
  kbl(
    col.names = c(
      "County", "Response", "Non-Response", "Rate", "Non-Response", "Rate"
    ),
    digits = c(0, 0, 1, 3, 0, 3)) %>% 
  add_header_above(c(" " = 2, "Adjusted" = 2, "Unadjusted" = 2)) %>% 
  kable_styling() %>% 
  weight_note()
```

# Non-response by perceived demographics

## Perceived demographic missingness
```{r}
#| echo: true
demo_missingness = surveys %>%
  group_by(county) %>% 
  summarise(
    approached = n(),
    one_plus_missing = sum(
      perceived_age == "Missing" |
      perceived_disability == "Missing" |
      perceived_intoxication == "Missing" |
      perceived_gender == "Missing" |
      perceived_race == "Missing"
    ),
    across(
      c(
        perceived_age, perceived_disability,
        perceived_intoxication, perceived_gender, perceived_race
      ),
      ~ sum(.x == "Missing")
    )
  ) %>% 
  adorn_totals() %>% 
  mutate(
    across(
      c(
        one_plus_missing, perceived_age, perceived_disability,
        perceived_intoxication, perceived_gender,  perceived_race
      ),
      ~ .x / approached
    )
  )
```

```{r}
demo_missingness %>% 
  select(-approached) %>% 
  kbl(
    col.names = c(
      "County", "1+ Missing", "Age", "Disability",
      "Intoxication", "Gender", "Race"
    ),
    digits = 3
  ) %>% 
  kable_styling() %>% 
  add_footnote(
    "<div class=kbl-fn>Table is unweighted.</div>",
    notation = "none",
    escape = FALSE
  )
```

```{r}
outcome_by_demo = function(demo) {
  surveys %>%
  group_by({{ demo }}) %>% 
  summarise(
    n = n(),
    approached = sum(initial_weight, na.rm = TRUE),
    eligibility_determined = weighted_sum(
      eligibility_determined,
      initial_weight
    ),
    ineligible = weighted_sum(ineligible, initial_weight),
    non_response = weighted_sum(non_response, initial_weight),
    response = weighted_sum(response, initial_weight)
  ) %>% 
  adorn_totals() %>% 
  mutate(
    ineligible = ineligible / eligibility_determined,
    eligibility_determined = eligibility_determined / approached,
    non_response = non_response / (non_response + response)
  ) %>% 
  select(
    {{ demo }}, n, eligibility_determined,
    ineligible, non_response
  )
}

outcome_by_demo_table = function(outcomes, demo_label) {
  outcomes %>% 
    kbl(
      col.names = c(
        demo_label, "N", "Eligibility Determined",
        "Ineligible", "Non-Response"
      ),
      digits = c(rep(0, 2), rep(3, 3))
    ) %>% 
    kable_styling() %>% 
    weight_note()
}
```

## Perceived age
```{r}
outcome_by_demo(perceived_age) %>% 
  outcome_by_demo_table("Age")
```

## Perceived disability
```{r}
outcome_by_demo(perceived_disability) %>% 
  outcome_by_demo_table("Disability")
```

## Perceived gender
```{r}
outcome_by_demo(perceived_gender) %>% 
  outcome_by_demo_table("Gender")
```

## Perceived intoxication
```{r}
outcome_by_demo(perceived_intoxication) %>% 
  outcome_by_demo_table("Intoxication")
```

## Perceived race
```{r}
outcome_by_demo(perceived_race) %>% 
  outcome_by_demo_table("Race")
```

# Perceived demographics reliability

```{r}
demo_reliability_data = surveys %>% 
  filter(response) %>% 
  mutate(
    actual_age = cut(
      age_self_report,
      c(17, 24, 54, Inf),
      c("18-24  years old", "25-54 years old", "55+ years old")
    ),
    actual_age = fct_explicit_na(actual_age, "Missing"),
    age_match = actual_age == perceived_age,
    actual_disability = fct_recode(
      fct_explicit_na(as_factor(disability_2), "Missing"),
      "Disabled" = "Yes",
      "Not Disabled" = "No",
      "Missing" = "Refused",
      "Missing" = "Dont know"
    ),
    disability_match = actual_disability == perceived_disability,
    actual_gender = fct_recode(
      fct_explicit_na(as_factor(gender_3cat), "Missing"),
      "Male" = "Male [cisgender]",
      "Female" = "Female [cisgender]",
      "Transgender" = "Other [transgender, genderqueer, etc]"
    ),
    gender_match = actual_gender == perceived_gender,
    actual_race = fct_recode(
      fct_explicit_na(as_factor(race_7cat), "Missing"),
      "Asian/Pacific Islander" = "NH AAPI",
      "Black" = "NH Black",
      "White" = "NH White",
      "Latinx" = "Latinx/Hispanic",
      "Native American" = "NH Native American/Alaskan",
      "Multiracial" = "NH Multiracial",
      "Other" = "NH Other"
    ),
    race_match = actual_race == perceived_race,
  )

demo_reliability_data %>% 
  summarise(
    age_n = sum(perceived_age != "Missing" & actual_age != "Missing"),
    age_match = sum(age_match[perceived_age != "Missing" & actual_age != "Missing"]),
    disability_n = sum(perceived_disability != "Missing" & actual_disability!= "Missing"),
    disability_match = sum(disability_match[perceived_disability != "Missing" & actual_disability != "Missing"]),
    gender_n = sum(perceived_gender != "Missing" & actual_gender != "Missing"),
    gender_match = sum(gender_match[perceived_gender != "Missing" & actual_gender != "Missing"]),
    race_n = sum(perceived_race != "Missing" & actual_race != "Missing"),
    race_match = sum(race_match[perceived_race != "Missing" & actual_race != "Missing"])
  ) %>% 
  pivot_longer(cols = everything(), names_to = c("demo", "stat"), names_sep = "_", values_to = "value") %>% 
  pivot_wider(names_from = stat, names_sort = TRUE, values_from = value) %>% 
  mutate(match_rate = match / n) %>% 
  ggplot(aes(x = match_rate, y = fct_rev(str_to_sentence(demo)))) +
  geom_point(size = 12, fill = bhhi_accent()) + 
  geom_text(aes(label = scales::percent(match_rate, 1)), color = "grey95") +
  scale_x_continuous(name = NULL, limits = 0:1, labels = scales::percent) +
  labs(
    y = NULL,
    caption = paste(
      "Results are unweighted.",
      "Respondents missing either an actual or perceived demographic are excluded for that demographic.", 
      sep = "\n"
    )
  )
```
